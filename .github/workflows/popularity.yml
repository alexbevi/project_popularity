name: Popularity Index

on:
  workflow_dispatch:
  schedule:
    - cron: "17 3 * * *"  # 03:17 UTC daily

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm ci

      - name: Build popularity data
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LOG_VERBOSE: 1
        run: node scripts/build-popularity.js

      - name: Generate output README
        run: |
          # generate a simple README from the JSON sorted by index
          python3 - <<'PY'
import json,sys
data=json.load(open('data/popularity.json'))
data=sorted(data,key=lambda r: -r.get('index',0))
rows=['| Rank | Name | Index | Stars | Weekly downloads |']
rows.append('|---|---:|---:|---:|---:|')
for r in data:
    rows.append(f"| {r.get('rank','')} | [{r.get('name','')}](https://github.com/{r.get('repo','')}) | {r.get('index','')} | {r.get('stars','')} | {r.get('weekly_downloads','')} |")
open('data/README.md','w').write('# Popularity data\n\n'+"\n".join(rows)+"\n")
          PY

      - name: Push data to output branch
        env:
          OUTPUT_BRANCH: output
          GIT_EMAIL: actions@github.com
          GIT_NAME: github-actions
        run: |
          # configure git
          git config user.email "$GIT_EMAIL"
          git config user.name "$GIT_NAME"

          # create an orphan branch so it contains only generated data
          git checkout --orphan $OUTPUT_BRANCH

          # ensure index is empty
          git rm -rf --cached . || true

          # copy data out to a temp location, remove everything except .git, then move data files to repo root
          TMP_DIR=$(mktemp -d)
          cp -R data/* "$TMP_DIR" || true

          # remove all files and dirs except .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} + || true

          # move data files into repo root
          cp -R "$TMP_DIR"/* . || true
          rm -rf "$TMP_DIR"

          # stage and commit only the generated files at repo root
          git add --all
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(popularity): refresh data"
            git push --force origin $OUTPUT_BRANCH
          fi