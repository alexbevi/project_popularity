name: Popularity Index

on:
  workflow_dispatch:
  schedule:
    - cron: "17 3 * * *"  # 03:17 UTC daily

jobs:
  matrix-prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps
        run: npm ci
      - name: Generate matrix from projects.yml
        id: set-matrix
        run: |
          node scripts/matrix-from-projects.cjs > matrix.json
          echo "matrix<<EOF" >> "$GITHUB_OUTPUT"
          cat matrix.json >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Show generated matrix
        run: |
          echo "--- matrix.json ---"
          cat matrix.json || true
          echo "--- end matrix ---"

  scrape:
    needs: matrix-prepare
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix-prepare.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps
        run: npm ci
      - name: Scrape single project
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LOG_VERBOSE: 1
          OWNER: ${{ matrix.owner }}
          REPO: ${{ matrix.repo }}
        run: |
          # run build for a single repo and write per-repo JSON (wrapper script)
          # If the scraper fails, write an empty array file so aggregation can continue and do not fail the job
          node scripts/scrape-single.cjs "${{ matrix.owner }}" "${{ matrix.repo }}" "${{ matrix.repo_full }}" || (
            echo "[]" > "data/popularity.${{ matrix.owner }}.${{ matrix.repo }}.json" ;
            echo "Scrape failed for ${{ matrix.repo_full }}, wrote empty artifact and continuing";
          )
      - name: Commit per-repo artifact to output branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          # fetch latest output branch if present
          git fetch origin output || true
          if git rev-parse --verify origin/output >/dev/null 2>&1; then
            git checkout output
            git pull --ff-only origin output || true
          else
            git checkout --orphan output
            git rm -rf . || true
          fi
          mkdir -p data
          # The scrape script should have written the file into data/
          FILE=data/popularity.${{ matrix.owner }}.${{ matrix.repo }}.json
          if [ ! -f "$FILE" ]; then
            echo "Warning: expected $FILE missing; writing empty array placeholder"
            echo "[]" > "$FILE"
          fi
          git add "$FILE"
          if git diff --staged --quiet; then
            echo "No changes to commit for $FILE"
          else
            git commit -m "chore(popularity): add/update ${{ matrix.repo_full }} snapshot"
          fi
          # push with a few retries to reduce race failures
          for i in 1 2 3; do
            if git push origin output; then
              echo "Pushed output branch"
              break
            else
              echo "Push failed, retrying... ($i)";
              git fetch origin output || true
              git pull --rebase origin output || true
            fi
          done

  aggregate:
    needs: scrape
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Checkout output branch
        run: |
          set -euo pipefail
          git fetch origin output || true
          if git rev-parse --verify origin/output >/dev/null 2>&1; then
            git checkout output
            git pull --ff-only origin output || true
          else
            git checkout --orphan output
            git rm -rf . || true
          fi
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install deps
        run: npm ci
      - name: Aggregate artifacts from output branch into data/popularity.json
        run: |
          node scripts/aggregate-artifacts.cjs
      - name: Generate output README
        run: node scripts/generate-readme.js
      - name: Push data to output branch
        env:
          OUTPUT_BRANCH: output
          GIT_EMAIL: actions@github.com
          GIT_NAME: github-actions
        run: |
          git config user.email "$GIT_EMAIL"
          git config user.name "$GIT_NAME"
          git checkout --orphan $OUTPUT_BRANCH
          git rm -rf --cached . || true
          TMP_DIR=$(mktemp -d)
          cp -R data "$TMP_DIR" || true
          cp -R web "$TMP_DIR" || true
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} + || true
          if [ -d "$TMP_DIR/web" ]; then
            cp -R "$TMP_DIR/web/." . || true
          fi
          if [ -d "$TMP_DIR/data" ]; then
            mkdir -p data
            cp -R "$TMP_DIR/data/." ./data || true
          fi
          if [ -f ./data/popularity.json ]; then cp ./data/popularity.json ./popularity.json || true; fi
          rm -rf "$TMP_DIR"
          git add --all
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(popularity): refresh data"
            git push --force origin $OUTPUT_BRANCH
          fi