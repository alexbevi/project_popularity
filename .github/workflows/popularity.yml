name: Popularity Index

on:
  workflow_dispatch:
  schedule:
    - cron: "17 3 * * *"  # 03:17 UTC daily

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm ci

      - name: Build popularity data
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LOG_VERBOSE: 1
        run: node scripts/build-popularity.js

      - name: Generate output README
        run: node scripts/generate-readme.js

      - name: Push data to output branch
        env:
          OUTPUT_BRANCH: output
          GIT_EMAIL: actions@github.com
          GIT_NAME: github-actions
        run: |
          # configure git
          git config user.email "$GIT_EMAIL"
          git config user.name "$GIT_NAME"

          # create an orphan branch so it contains only generated data
          git checkout --orphan $OUTPUT_BRANCH

          # ensure index is empty
          git rm -rf --cached . || true

          # copy data and web output to a temp location, remove everything except .git, then move files to repo root
          TMP_DIR=$(mktemp -d)
          cp -R data "$TMP_DIR" || true
          cp -R web "$TMP_DIR" || true

          # remove all files and dirs except .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} + || true

          # move web files contents into repo root (so the SPA is served from root)
          if [ -d "$TMP_DIR/web" ]; then
            cp -R "$TMP_DIR/web/." . || true
          fi
          # move data directory into ./data at repo root
          if [ -d "$TMP_DIR/data" ]; then
            mkdir -p data
            cp -R "$TMP_DIR/data/." ./data || true
          fi
          # also copy the main JSON into repo root as popularity.json for the SPA
          if [ -f ./data/popularity.json ]; then cp ./data/popularity.json ./popularity.json || true; fi
          rm -rf "$TMP_DIR"

          # stage and commit only the generated files at repo root
          git add --all
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(popularity): refresh data"
            git push --force origin $OUTPUT_BRANCH
          fi